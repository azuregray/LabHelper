6)
Set up the Node.js server. 
Create an HTML form to input the data. 
Use AJAX to send the data to the server. 
Handle the data on the server side. 


Step 1: Set Up the Node.js Server 
First, create a new directory for your project and initialize a new Node.js 
project: 
mkdir fruit-app 
cd fruit-app 
npm init -y 
Install the necessary dependencies: 
npm install express body-parser 
Create a file named server.js and set up a basic Express server: 
const express = require('express'); 
const bodyParser = require('body-parser'); 
const app = express(); 
const port = 3000; 
// Middleware to parse JSON data 
app.use(bodyParser.json()); 
// Serve static files from the 'public' directory 
app.use(express.static('public')); 
// Endpoint to handle fruit data 
app.post('/submit-fruit', (req, res) => { 
const fruitData = req.body; 
console.log('Received fruit data:', fruitData); 
res.json({ message: 'Fruit data received successfully!' }); 
}); 
console.log(`Server is running on http://localhost:${port}`); 
}); 


Step 2: Create an HTML Form 
Create a directory named public in the project root and inside it, create an 
index.html file: 
<!DOCTYPE html> 
<html lang="en"> 
<head> 
<meta charset="UTF-8"> 
<meta name="viewport" content="width=device-width, initial-scale=1.0"> 
<title>Fruit Data Submission</title> 
</head> 
<body> 
<h1>Submit Fruit Data</h1> 
<form id="fruitForm"> 
<label for="name">Fruit Name:</label> 
<input type="text" id="name" name="name" required><br><br> 
<label for="price">Price:</label> 
<input type="number" id="price" name="price" required><br><br> 
<button type="submit">Submit</button> 
</form> 
<script src="script.js"></script> 
</body> 
</html>  


Step 3: Use AJAX to Send Data 
Create a script.js file in the public directory and add the AJAX code to send 
data to the server: 
document.getElementById('fruitForm').addEventListener('submit', 
function(event) { 
event.preventDefault(); 
const name = document.getElementById('name').value; 
const price = document.getElementById('price').value; 
const fruitData = { 
name: name, 
price: price 
}; 
fetch('/submit-fruit', { 
method: 'POST', 
headers: { 
'Content-Type': 'application/json' 
}, 
body: JSON.stringify(fruitData) 
}) 
.then(response => response.json()) 
.then(data => { 
console.log(data); 
alert(data.message); 
}) 
.catch(error => { 
console.error('Error:', error); 
}); 
}); 


Step 4: Handle the Data on the Server Side  
The server-side code is already set up to handle the incoming data and respond. 
The POST endpoint /submit-fruit receives the fruit data and logs it to the 
console. 
Running the Application 
Start the Node.js server: 
node server.js
