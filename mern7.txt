7)
Set up the Node.js server with Express. 
Create an HTML form for the login. 
Handle the form submission using the POST method. 
Implement basic authentication logic. 


Step 1: Set Up the Node.js Server with Express 
First, create a new directory for your project and initialize a new Node.js 
project: 
mkdir auth-app 
cd auth-app 
npm init -y 
Install the necessary dependencies: 
npm install express body-parser 
Create a file named server.js and set up a basic Express server: 
const express = require('express'); 
const bodyParser = require('body-parser'); 
const app = express(); 
const port = 3000; 
// Middleware to parse JSON data 
app.use(bodyParser.json()); 
app.use(bodyParser.urlencoded({ extended: true })); 
// Serve static files from the 'public' directory 
app.use(express.static('public')); 
// Dummy user data (for demonstration purposes) 
const users = [ 
{ 
email: 'user@example.com', 
password: 'password123' // In a real application, passwords to be entered 
} 
]; 
// Endpoint to handle login 
app.post('/login', (req, res) => { 
const { email, password } = req.body; 
const user = users.find(u => u.email === email && u.password === 
password); 
if (user) { 
res.json({ message: 'Login successful!'a    }); 
} else { 
res.status(401).json({ message: 'Invalid email or password.' }); 
} 
}); 
app.listen(port, () => { 
console.log(`Server is running on http://localhost:${port}`); 
}); 


Step 2: Create an HTML Form for the Login 
Create a directory named public in the project root and inside it, create an 
index.html file: 
<!DOCTYPE html> 
<html lang="en"> 
<head> 
<meta charset="UTF-8"> 
<meta name="viewport" content="width=device-width, initial-scale=1.0"> 
<title>Login</title> 
</head> 
<body> 
<h1>Login</h1> 
<form id="loginForm"> 
<label for="email">Email:</label> 
<input type="email" id="email" name="email" required><br><br> 
<label for="password">Password:</label> 
<input 
type="password" 
id="password" 
required><br><br> 
<button type="submit">Login</button> 
</form> 
<script src="script.js"></script> 
</body> 
</html> 


Step 3: Handle the Form Submission Using AJAX 
name="password" 
Create a script.js file in the public directory and add the AJAX code to send the 
form data to the server: 
document.getElementById('loginForm').addEventListener('submit', 
function(event) { 
event.preventDefault(); 
const email = document.getElementById('email').value; 
const password = document.getElementById('password').value; 
const loginData = { 
email: email, 
password: password 
}; 
fetch('/login', { 
method: 'POST', 
headers: { 
'Content-Type': 'application/x-www-form-urlencoded' 
}, 
body: new URLSearchParams(loginData) 
}) 
.then(response => response.json()) 
.then(data => { 
console.log(data); 
alert(data.message); 
}) 
.catch(error => { 
console.error('Error:', error); 
alert('An error occurred. Please try again.'); 
}); 
}); 


Step 4: Implement Basic Authentication Logic 
The server-side code already includes basic authentication logic in the /login 
endpoint. It checks if the email and password match the dummy user data and 
responds accordingly. 
Running the Application 
Start the Node.js server: 
node server.js 
Open your browser and navigate to http://localhost:3000. 
Enter the email user@example.com and password password123, then submit 
the form. 
You should see an alert message confirming the login status.
